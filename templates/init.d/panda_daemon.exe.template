#!/bin/sh
#
# chkconfig: - 85 15
#
# description: Panda server daemon
# processname: python
# config: /etc/panda/panda_server.cfg
# pidfile: /var/log/panda/panda_daemon.pid
#

# When multiple arguments are given, only the error from the _last_
# one is reported.
#
ARGV="$@"
#
# |||||||||||||||||||| START CONFIGURATION SECTION  ||||||||||||||||||||
# --------------------                              --------------------
#

# virtual env and package path
VENV='/opt/panda'
PACKAGE_PATH='/opt/panda/lib/python3.6/site-packages'

# virtual env activation
# @@virtual_env_setup@@
. ${VENV}/bin/activate

# the path to application
# PROGNAME='python -u @@install_purelib@@/pandaserver/daemons/master.py'
PROGNAME="python -u ${PACKAGE_PATH}/pandaserver/daemons/master.py"

# pid and lock files
PIDFILE='/var/log/panda/panda_daemon.pid'
LOCKFILE='/var/lock/subsys/panda_daemon'

# log files
LOGSTDOUT='/var/log/panda/panda_daemon_stdout.log'
LOGSTDERR='/var/log/panda/panda_daemon_stderr.log'

# Source panda server env variables
if [ -r /etc/sysconfig/panda_server ]; then
   . /etc/sysconfig/panda_server
fi


ERROR=0
if [ "x$ARGV" = "x" ] ; then
    ARGV="-h"
fi


case $ARGV in
start)
    if [ -f $LOCKFILE ]; then
	echo "ERROR: PanDA Daemon is already running with lockfile:$LOCKFILE"
    else
	echo "start PanDA Daemon"
	for itry in `seq 1 5`
	do
	    echo "trying $itry"
	    $PROGNAME --pid $PIDFILE >> $LOGSTDOUT 2>> $LOGSTDERR
	    touch $LOCKFILE
	    sleep 5
	    ps -p `cat $PIDFILE` > /dev/null
	    ERROR=$?
	    if [ $ERROR -eq 0 ]; then
    		echo "succeeded"
    		break
	    else
    		echo "failed with $ERROR"
    		rm -f $LOCKFILE
	    fi
	done
    fi
    ;;
stop)
    echo "stop PanDA Daemon"
    for itry in `seq 1 5`
    do
      echo "trying $itry"
      if [ ! -f $PIDFILE ]; then
        echo "pidfile $PIDFILE does not exist; skipped"
        rm -f $LOCKFILE
        ERROR=2
        exit $ERROR
      fi
      kill `cat $PIDFILE`
      sleep 5
      ps -p `cat $PIDFILE` > /dev/null
      ERROR=$?
      if [ $ERROR -eq 1 ]; then
        echo "succeeded"
        rm -f $PIDFILE ${PIDFILE}.lock $LOCKFILE
        break
      else
        echo "failed with $ERROR"
        sleep 5
      fi
    done
    ;;
*)
    echo "ERROR: unknown command $ARGV"
    ERROR=1
esac

exit $ERROR
